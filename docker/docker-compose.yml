version: '3.9'

services:
  mongo-node-1:
    build:
      context: ./mongodb
      dockerfile: Dockerfile
    image: mongo-node:lastest
    container_name: mongo-node-1
    restart: always
    networks:
      - mongo-cluster
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - "mongo-data-1:/data/db"

  mongo-node-2:
    image: mongo-node:lastest
    depends_on:
      - mongo-node-1
    container_name: mongo-node-2
    restart: always
    networks:
      - mongo-cluster
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - "mongo-data-2:/data/db"

  mongo-node-3:
    image: mongo-node:lastest
    depends_on:
      - mongo-node-1
    container_name: mongo-node-3
    restart: always
    networks:
      - mongo-cluster
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - "mongo-data-3:/data/db"

  mongo-cluster-init:
    image: mongo:6.0.13
    container_name: mongo-cluster-init
    depends_on:
      - mongo-node-1
      - mongo-node-2
      - mongo-node-3
    networks:
      - mongo-cluster
    volumes:
      - "./mongodb/mongo-init.js:/mongo-init.js:ro"
    command: >
      bash -c "
        echo 'Starting MongoDB Replica Set initialization' &&
        if mongosh --host mongo-node-1:27017 -u root -p password --authenticationDatabase admin --eval 'rs.status().ok' | grep -q '1'; then
          echo 'MongoDB Replica Set already initialized.';
        else
          mongosh --host mongo-node-1:27017 -u root -p password --authenticationDatabase admin --eval '
            rs.initiate({
              _id: \"rs0\",
              members: [
                { _id: 0, host: \"mongo-node-1:27017\" },
                { _id: 1, host: \"mongo-node-2:27017\" },
                { _id: 2, host: \"mongo-node-3:27017\" }
              ]
            });
          ' &&
          echo 'MongoDB Replica Set initialized';
        fi &&
        echo 'Running additional scripts...' &&
        mongosh --host mongo-node-1:27017 -u root -p password --authenticationDatabase admin /mongo-init.js
      "
    restart: on-failure

  redis-node-1:
    image: redis:7.2.4
    container_name: redis-node-1 
    networks:
      - redis-cluster
    command: redis-server --port 6379 --cluster-enabled yes --cluster-node-timeout 5000
    restart: always
    ports:
      - "7000:6379"

  redis-node-2:
    image: redis:7.2.4
    container_name: redis-node-2 
    networks:
      - redis-cluster
    command: redis-server --port 6379 --cluster-enabled yes --cluster-node-timeout 5000
    restart: always
    ports:
      - "7001:6379"
  
  redis-node-3:
    image: redis:7.2.4
    container_name: redis-node-3 
    networks:
      - redis-cluster
    command: redis-server --port 6379 --cluster-enabled yes --cluster-node-timeout 5000
    restart: always
    ports:
      - "7002:6379"

  redis-node-4:
    image: redis:7.2.4
    container_name: redis-node-4 
    networks:
      - redis-cluster
    command: redis-server --port 6379 --cluster-enabled yes --cluster-node-timeout 5000
    restart: always
    ports:
      - "7003:6379"
  
  redis-node-5:
    image: redis:7.2.4
    container_name: redis-node-5 
    networks:
      - redis-cluster
    command: redis-server --port 6379 --cluster-enabled yes --cluster-node-timeout 5000
    restart: always
    ports:
      - "7004:6379"
  
  redis-node-6:
    image: redis:7.2.4
    container_name: redis-node-6 
    networks:
      - redis-cluster
    command: redis-server --port 6379 --cluster-enabled yes --cluster-node-timeout 5000
    restart: always
    ports:
      - "7005:6379"

  redis-cluster-init:
    image: redis:7.2.4
    networks:
      - redis-cluster
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    entrypoint: /bin/bash
    command: >
      -c "redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1"

  linkZapURL-server-1:
    image: linkZapURL-server
    container_name: linkZapURL-server-1
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    networks:
      - mongo-cluster
      - redis-cluster
      - linkZapURL-network
    ports:
      - "8080:8080"
    environment:
      MACHINE_ID: 1
      ENDPOINT: http://localhost
    depends_on:
      - mongo-cluster-init
      - redis-cluster-init

volumes:
  mongo-data-1:
  mongo-data-2:
  mongo-data-3:

networks:
  mongo-cluster:
    driver: bridge
  redis-cluster:
    driver: bridge
  linkZapURL-network:
    driver: bridge