// Code generated by MockGen. DO NOT EDIT.
// Source: shortening.go

// Package shortening is a generated GoMock package.
package shortening

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShortening is a mock of Shortening interface.
type MockShortening struct {
	ctrl     *gomock.Controller
	recorder *MockShorteningMockRecorder
}

// MockShorteningMockRecorder is the mock recorder for MockShortening.
type MockShorteningMockRecorder struct {
	mock *MockShortening
}

// NewMockShortening creates a new mock instance.
func NewMockShortening(ctrl *gomock.Controller) *MockShortening {
	mock := &MockShortening{ctrl: ctrl}
	mock.recorder = &MockShorteningMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortening) EXPECT() *MockShorteningMockRecorder {
	return m.recorder
}

// Shorten mocks base method.
func (m *MockShortening) Shorten(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShorteningMockRecorder) Shorten(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortening)(nil).Shorten), ctx, url)
}
